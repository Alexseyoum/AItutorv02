
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum LearningStyle {
  VISUAL
  AUDITORY
  KINESTHETIC
  READING_WRITING
  MIXED
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ActivityType {
  CHAT_MESSAGE
  QUIZ_COMPLETED
  TOPIC_STUDIED
  PROBLEM_SOLVED
  SESSION_COMPLETED
  EXPLANATION_REQUESTED
}

enum AchievementCategory {
  STREAK
  PROBLEM_SOLVING
  SUBJECT_MASTERY
  ENGAGEMENT
  MILESTONE
}

model Post {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  content String

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model User {
  id            String    @id
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  
  name          String
  email         String @unique
  emailVerified Boolean   
  image         String?
  role          UserRole  @default(USER)
  banned        Boolean?  @default(false)
  banReason     String?
  banExpires    DateTime?

  // Student profile fields
  isOnboarded          Boolean       @default(false)
  gradeLevel          Int?
  age                 Int?
  school              String?
  subjects            String[]      @default([])
  learningGoals       String[]      @default([])
  learningStyle       LearningStyle @default(MIXED)
  difficultyLevel     DifficultyLevel @default(INTERMEDIATE)
  sessionDuration     Int?          // in minutes
  interests           String[]      @default([])
  pastEngagement      Float?        @default(0)

  sessions      Session[]
  accounts      Account[]
  posts         Post[]
  activities    StudentActivity[]
  streak        LearningStreak?
  achievements  Achievement[]
  chatSessions  ChatSession[]

  @@map("users")
}

model Session {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  expiresAt DateTime
  token     String    @unique
  ipAddress String?
  userAgent String?
  impersonatedBy String?
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@map("accounts")
}

model Verification {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model StudentActivity {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      ActivityType
  subject   String?
  topic     String?
  duration  Int?          // in minutes
  score     Float?        // 0-100 for quizzes/tests
  metadata  Json?         // flexible data storage
  
  @@map("student_activities")
}

model LearningStreak {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastActivity  DateTime @default(now())
  
  @@map("learning_streaks")
}

model Achievement {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title       String
  description String
  icon        String
  category    AchievementCategory
  progress    Float    @default(0) // 0-100
  completed   Boolean  @default(false)
  
  @@map("achievements")
}

model ChatSession {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title     String?
  topic     String?
  isActive  Boolean  @default(true)
  
  messages  ChatMessage[]
  
  @@map("chat_sessions")
}

model ChatMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  content   String
  type      String   // "user" or "ai"
  metadata  Json?
  
  @@map("chat_messages")
}