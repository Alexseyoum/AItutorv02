
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  content: 'content',
  userId: 'userId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  role: 'role',
  banned: 'banned',
  banReason: 'banReason',
  banExpires: 'banExpires',
  isOnboarded: 'isOnboarded',
  gradeLevel: 'gradeLevel',
  age: 'age',
  school: 'school',
  subjects: 'subjects',
  learningGoals: 'learningGoals',
  learningStyle: 'learningStyle',
  difficultyLevel: 'difficultyLevel',
  sessionDuration: 'sessionDuration',
  interests: 'interests',
  pastEngagement: 'pastEngagement',
  isInterestedInSATPrep: 'isInterestedInSATPrep'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  impersonatedBy: 'impersonatedBy',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  accountId: 'accountId',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  userId: 'userId'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt'
};

exports.Prisma.StudentActivityScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  type: 'type',
  subject: 'subject',
  topic: 'topic',
  duration: 'duration',
  score: 'score',
  metadata: 'metadata'
};

exports.Prisma.LearningStreakScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  currentStreak: 'currentStreak',
  longestStreak: 'longestStreak',
  lastActivity: 'lastActivity'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  title: 'title',
  description: 'description',
  icon: 'icon',
  category: 'category',
  progress: 'progress',
  completed: 'completed'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  title: 'title',
  topic: 'topic',
  isActive: 'isActive'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  sessionId: 'sessionId',
  content: 'content',
  type: 'type',
  metadata: 'metadata',
  imageUrl: 'imageUrl',
  links: 'links',
  keywords: 'keywords'
};

exports.Prisma.SATStudyPlanScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  timeline: 'timeline',
  focusAreas: 'focusAreas',
  weeklySchedule: 'weeklySchedule',
  resourceRecommendations: 'resourceRecommendations',
  aiGeneratedPlan: 'aiGeneratedPlan',
  completedWeeks: 'completedWeeks',
  completedTasks: 'completedTasks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SATPracticeSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  section: 'section',
  score: 'score',
  maxScore: 'maxScore',
  answers: 'answers',
  timeSpent: 'timeSpent',
  completedAt: 'completedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SATDiagnosticResultScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mathScore: 'mathScore',
  readingScore: 'readingScore',
  writingScore: 'writingScore',
  totalScore: 'totalScore',
  strengths: 'strengths',
  weaknesses: 'weaknesses',
  createdAt: 'createdAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  topic: 'topic',
  subject: 'subject',
  difficulty: 'difficulty',
  question: 'question',
  choices: 'choices',
  answer: 'answer',
  explanation: 'explanation',
  source: 'source',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userGeneratedBy: 'userGeneratedBy'
};

exports.Prisma.MockExamScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  goal: 'goal',
  grade: 'grade',
  sections: 'sections',
  totalTime: 'totalTime',
  createdAt: 'createdAt'
};

exports.Prisma.MockAttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mockExamId: 'mockExamId',
  answers: 'answers',
  scored: 'scored',
  summary: 'summary',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TopicMasteryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  topic: 'topic',
  correct: 'correct',
  total: 'total',
  lastSeenAt: 'lastSeenAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.LearningStyle = exports.$Enums.LearningStyle = {
  VISUAL: 'VISUAL',
  AUDITORY: 'AUDITORY',
  KINESTHETIC: 'KINESTHETIC',
  READING_WRITING: 'READING_WRITING',
  MIXED: 'MIXED'
};

exports.DifficultyLevel = exports.$Enums.DifficultyLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  CHAT_MESSAGE: 'CHAT_MESSAGE',
  QUIZ_COMPLETED: 'QUIZ_COMPLETED',
  TOPIC_STUDIED: 'TOPIC_STUDIED',
  PROBLEM_SOLVED: 'PROBLEM_SOLVED',
  SESSION_COMPLETED: 'SESSION_COMPLETED',
  EXPLANATION_REQUESTED: 'EXPLANATION_REQUESTED'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  STREAK: 'STREAK',
  PROBLEM_SOLVING: 'PROBLEM_SOLVING',
  SUBJECT_MASTERY: 'SUBJECT_MASTERY',
  ENGAGEMENT: 'ENGAGEMENT',
  MILESTONE: 'MILESTONE'
};

exports.Prisma.ModelName = {
  Post: 'Post',
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  StudentActivity: 'StudentActivity',
  LearningStreak: 'LearningStreak',
  Achievement: 'Achievement',
  ChatSession: 'ChatSession',
  ChatMessage: 'ChatMessage',
  SATStudyPlan: 'SATStudyPlan',
  SATPracticeSession: 'SATPracticeSession',
  SATDiagnosticResult: 'SATDiagnosticResult',
  Question: 'Question',
  MockExam: 'MockExam',
  MockAttempt: 'MockAttempt',
  TopicMastery: 'TopicMastery'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
