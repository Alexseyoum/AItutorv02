
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  content: 'content',
  userId: 'userId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  role: 'role',
  banned: 'banned',
  banReason: 'banReason',
  banExpires: 'banExpires',
  isOnboarded: 'isOnboarded',
  gradeLevel: 'gradeLevel',
  age: 'age',
  school: 'school',
  subjects: 'subjects',
  learningGoals: 'learningGoals',
  learningStyle: 'learningStyle',
  difficultyLevel: 'difficultyLevel',
  sessionDuration: 'sessionDuration',
  interests: 'interests',
  pastEngagement: 'pastEngagement',
  isInterestedInSATPrep: 'isInterestedInSATPrep'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  impersonatedBy: 'impersonatedBy',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  accountId: 'accountId',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  userId: 'userId'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt'
};

exports.Prisma.StudentActivityScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  type: 'type',
  subject: 'subject',
  topic: 'topic',
  duration: 'duration',
  score: 'score',
  metadata: 'metadata'
};

exports.Prisma.LearningStreakScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  currentStreak: 'currentStreak',
  longestStreak: 'longestStreak',
  lastActivity: 'lastActivity'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  title: 'title',
  description: 'description',
  icon: 'icon',
  category: 'category',
  progress: 'progress',
  completed: 'completed'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  title: 'title',
  topic: 'topic',
  isActive: 'isActive'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  sessionId: 'sessionId',
  content: 'content',
  type: 'type',
  metadata: 'metadata',
  imageUrl: 'imageUrl',
  links: 'links',
  keywords: 'keywords'
};

exports.Prisma.SATStudyPlanScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  timeline: 'timeline',
  focusAreas: 'focusAreas',
  weeklySchedule: 'weeklySchedule',
  resourceRecommendations: 'resourceRecommendations',
  aiGeneratedPlan: 'aiGeneratedPlan',
  completedWeeks: 'completedWeeks',
  completedTasks: 'completedTasks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SATPracticeSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  section: 'section',
  score: 'score',
  maxScore: 'maxScore',
  answers: 'answers',
  timeSpent: 'timeSpent',
  completedAt: 'completedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SATDiagnosticResultScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mathScore: 'mathScore',
  readingScore: 'readingScore',
  writingScore: 'writingScore',
  totalScore: 'totalScore',
  strengths: 'strengths',
  weaknesses: 'weaknesses',
  createdAt: 'createdAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  topic: 'topic',
  subject: 'subject',
  difficulty: 'difficulty',
  question: 'question',
  choices: 'choices',
  answer: 'answer',
  explanation: 'explanation',
  source: 'source',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userGeneratedBy: 'userGeneratedBy'
};

exports.Prisma.MockExamScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  goal: 'goal',
  grade: 'grade',
  sections: 'sections',
  totalTime: 'totalTime',
  createdAt: 'createdAt'
};

exports.Prisma.MockAttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mockExamId: 'mockExamId',
  answers: 'answers',
  scored: 'scored',
  summary: 'summary',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TopicMasteryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  topic: 'topic',
  correct: 'correct',
  total: 'total',
  lastSeenAt: 'lastSeenAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.LearningStyle = exports.$Enums.LearningStyle = {
  VISUAL: 'VISUAL',
  AUDITORY: 'AUDITORY',
  KINESTHETIC: 'KINESTHETIC',
  READING_WRITING: 'READING_WRITING',
  MIXED: 'MIXED'
};

exports.DifficultyLevel = exports.$Enums.DifficultyLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  CHAT_MESSAGE: 'CHAT_MESSAGE',
  QUIZ_COMPLETED: 'QUIZ_COMPLETED',
  TOPIC_STUDIED: 'TOPIC_STUDIED',
  PROBLEM_SOLVED: 'PROBLEM_SOLVED',
  SESSION_COMPLETED: 'SESSION_COMPLETED',
  EXPLANATION_REQUESTED: 'EXPLANATION_REQUESTED'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  STREAK: 'STREAK',
  PROBLEM_SOLVING: 'PROBLEM_SOLVING',
  SUBJECT_MASTERY: 'SUBJECT_MASTERY',
  ENGAGEMENT: 'ENGAGEMENT',
  MILESTONE: 'MILESTONE'
};

exports.Prisma.ModelName = {
  Post: 'Post',
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  StudentActivity: 'StudentActivity',
  LearningStreak: 'LearningStreak',
  Achievement: 'Achievement',
  ChatSession: 'ChatSession',
  ChatMessage: 'ChatMessage',
  SATStudyPlan: 'SATStudyPlan',
  SATPracticeSession: 'SATPracticeSession',
  SATDiagnosticResult: 'SATDiagnosticResult',
  Question: 'Question',
  MockExam: 'MockExam',
  MockAttempt: 'MockAttempt',
  TopicMastery: 'TopicMastery'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\tutorbyai\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\tutorbyai\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum UserRole {\n  USER\n  ADMIN\n}\n\nenum LearningStyle {\n  VISUAL\n  AUDITORY\n  KINESTHETIC\n  READING_WRITING\n  MIXED\n}\n\nenum DifficultyLevel {\n  BEGINNER\n  INTERMEDIATE\n  ADVANCED\n}\n\nenum ActivityType {\n  CHAT_MESSAGE\n  QUIZ_COMPLETED\n  TOPIC_STUDIED\n  PROBLEM_SOLVED\n  SESSION_COMPLETED\n  EXPLANATION_REQUESTED\n}\n\nenum AchievementCategory {\n  STREAK\n  PROBLEM_SOLVING\n  SUBJECT_MASTERY\n  ENGAGEMENT\n  MILESTONE\n}\n\nmodel Post {\n  id        String   @id @default(uuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  title   String\n  content String\n\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"posts\")\n}\n\nmodel User {\n  id        String   @id\n  createdAt DateTime @default(now())\n  updatedAt DateTime @default(now()) @updatedAt\n\n  name          String\n  email         String    @unique\n  emailVerified Boolean\n  image         String?\n  role          UserRole  @default(USER)\n  banned        Boolean?  @default(false)\n  banReason     String?\n  banExpires    DateTime?\n\n  // Student profile fields\n  isOnboarded           Boolean         @default(false)\n  gradeLevel            Int?\n  age                   Int?\n  school                String?\n  subjects              String[]        @default([])\n  learningGoals         String[]        @default([])\n  learningStyle         LearningStyle   @default(MIXED)\n  difficultyLevel       DifficultyLevel @default(INTERMEDIATE)\n  sessionDuration       Int? // in minutes\n  interests             String[]        @default([])\n  pastEngagement        Float?          @default(0)\n  isInterestedInSATPrep Boolean?        @default(false)\n\n  sessions             Session[]\n  accounts             Account[]\n  posts                Post[]\n  activities           StudentActivity[]\n  streak               LearningStreak?\n  achievements         Achievement[]\n  chatSessions         ChatSession[]\n  satStudyPlans        SATStudyPlan[]\n  satPracticeSessions  SATPracticeSession[]\n  satDiagnosticResults SATDiagnosticResult[]\n\n  // Question bank relations\n  generatedQuestions Question[]     @relation(\"UserGeneratedQuestions\")\n  mockExams          MockExam[]\n  mockAttempts       MockAttempt[]\n  topicMasteries     TopicMastery[]\n\n  @@index([email])\n  @@index([createdAt])\n  @@map(\"users\")\n}\n\nmodel Session {\n  id        String   @id\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  expiresAt      DateTime\n  token          String   @unique\n  ipAddress      String?\n  userAgent      String?\n  impersonatedBy String?\n\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"sessions\")\n}\n\nmodel Account {\n  id        String   @id\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  accountId             String\n  providerId            String\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"accounts\")\n}\n\nmodel Verification {\n  id        String   @id\n  createdAt DateTime @default(now())\n  updatedAt DateTime @default(now()) @updatedAt\n\n  identifier String\n  value      String\n  expiresAt  DateTime\n\n  @@map(\"verifications\")\n}\n\nmodel StudentActivity {\n  id        String   @id @default(uuid())\n  createdAt DateTime @default(now())\n\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  type     ActivityType\n  subject  String?\n  topic    String?\n  duration Int? // in minutes\n  score    Float? // 0-100 for quizzes/tests\n  metadata Json? // flexible data storage\n\n  @@index([userId])\n  @@index([type])\n  @@index([createdAt])\n  @@map(\"student_activities\")\n}\n\nmodel LearningStreak {\n  id     String @id @default(uuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  currentStreak Int      @default(0)\n  longestStreak Int      @default(0)\n  lastActivity  DateTime @default(now())\n\n  @@map(\"learning_streaks\")\n}\n\nmodel Achievement {\n  id        String   @id @default(uuid())\n  createdAt DateTime @default(now())\n\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  title       String\n  description String\n  icon        String\n  category    AchievementCategory\n  progress    Float               @default(0) // 0-100\n  completed   Boolean             @default(false)\n\n  @@map(\"achievements\")\n}\n\nmodel ChatSession {\n  id        String   @id @default(uuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  title    String?\n  topic    String?\n  isActive Boolean @default(true)\n\n  messages ChatMessage[]\n\n  @@index([userId])\n  @@index([isActive])\n  @@index([createdAt])\n  @@map(\"chat_sessions\")\n}\n\nmodel ChatMessage {\n  id        String   @id @default(uuid())\n  createdAt DateTime @default(now())\n\n  sessionId String\n  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n\n  content  String\n  type     String // \"user\" or \"ai\"\n  metadata Json?\n\n  // New fields for hybrid implementation\n  imageUrl String? // Base64 or URL for generated images\n  links    Json? // Array of { title: string, url: string, type: 'youtube' | 'wikipedia', snippet?: string }\n  keywords String[] @default([]) // Extracted keywords for better search\n\n  @@map(\"chat_messages\")\n}\n\nmodel SATStudyPlan {\n  id     String @id @default(cuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  timeline                String // \"3-month\", \"6-month\", \"1-year\"\n  focusAreas              Json // Store as JSON: { math: string[], reading: string[], writing: string[] }\n  weeklySchedule          Json // Store weekly schedule as JSON\n  resourceRecommendations Json // Store recommended resources as JSON\n  aiGeneratedPlan         Json? // Store the raw AI-generated plan\n\n  // Progress tracking fields\n  completedWeeks Int[] @default([]) // Array of completed week numbers\n  completedTasks Json  @default(\"{}\") // Store completed tasks by week and day\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"sat_study_plans\")\n}\n\nmodel SATPracticeSession {\n  id     String @id @default(cuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  section   String // \"math\", \"reading\", \"writing\", \"full\"\n  score     Int?\n  maxScore  Int? // Maximum possible score for this section\n  answers   Json? // Store student answers and question details\n  timeSpent Int? // Time spent in seconds\n\n  completedAt DateTime? @default(now())\n  createdAt   DateTime  @default(now())\n\n  @@map(\"sat_practice_sessions\")\n}\n\nmodel SATDiagnosticResult {\n  id     String @id @default(cuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  mathScore    Int?\n  readingScore Int?\n  writingScore Int?\n  totalScore   Int?\n\n  strengths  Json? // Store as JSON array of strong areas\n  weaknesses Json? // Store as JSON array of weak areas\n\n  createdAt DateTime @default(now())\n\n  @@map(\"sat_diagnostic_results\")\n}\n\nmodel Question {\n  id          String   @id @default(cuid())\n  topic       String\n  subject     String\n  difficulty  String\n  question    String\n  choices     Json // Store as JSON array of strings\n  answer      String\n  explanation String\n  source      String   @default(\"generated\") // \"generated\" or \"official\"\n  status      String   @default(\"pending_review\") // \"pending_review\", \"approved\", \"rejected\"\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relations\n  userGeneratedBy String?\n  user            User?   @relation(\"UserGeneratedQuestions\", fields: [userGeneratedBy], references: [id], onDelete: SetNull)\n\n  @@map(\"questions\")\n}\n\nmodel MockExam {\n  id        String   @id @default(cuid())\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  goal      String // \"SAT\", \"GRADE_LEVEL\", etc.\n  grade     Int\n  sections  Json // Store exam sections with questions\n  totalTime Int // Total time in minutes\n  createdAt DateTime @default(now())\n\n  attempts MockAttempt[]\n\n  @@map(\"mock_exams\")\n}\n\nmodel MockAttempt {\n  id         String   @id @default(cuid())\n  userId     String\n  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  mockExamId String\n  mockExam   MockExam @relation(fields: [mockExamId], references: [id], onDelete: Cascade)\n  answers    Json // Store user answers and time spent\n  scored     Json // Store scoring results\n  summary    Json // Store attempt summary\n  startedAt  DateTime\n  finishedAt DateTime\n  createdAt  DateTime @default(now())\n\n  @@map(\"mock_attempts\")\n}\n\nmodel TopicMastery {\n  id         String   @id @default(cuid())\n  userId     String\n  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  topic      String\n  correct    Int      @default(0)\n  total      Int      @default(0)\n  lastSeenAt DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  @@unique([userId, topic])\n  @@map(\"topic_mastery\")\n}\n",
  "inlineSchemaHash": "85ae6c0bd9d3882bde9f1d2a3983cdbcc85af330617c2c692fd42aa50a496da2",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Post\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PostToUser\"}],\"dbName\":\"posts\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"banned\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"banReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"banExpires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isOnboarded\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"gradeLevel\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"age\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"school\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subjects\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"learningGoals\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"learningStyle\",\"kind\":\"enum\",\"type\":\"LearningStyle\"},{\"name\":\"difficultyLevel\",\"kind\":\"enum\",\"type\":\"DifficultyLevel\"},{\"name\":\"sessionDuration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"interests\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pastEngagement\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"isInterestedInSATPrep\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToUser\"},{\"name\":\"activities\",\"kind\":\"object\",\"type\":\"StudentActivity\",\"relationName\":\"StudentActivityToUser\"},{\"name\":\"streak\",\"kind\":\"object\",\"type\":\"LearningStreak\",\"relationName\":\"LearningStreakToUser\"},{\"name\":\"achievements\",\"kind\":\"object\",\"type\":\"Achievement\",\"relationName\":\"AchievementToUser\"},{\"name\":\"chatSessions\",\"kind\":\"object\",\"type\":\"ChatSession\",\"relationName\":\"ChatSessionToUser\"},{\"name\":\"satStudyPlans\",\"kind\":\"object\",\"type\":\"SATStudyPlan\",\"relationName\":\"SATStudyPlanToUser\"},{\"name\":\"satPracticeSessions\",\"kind\":\"object\",\"type\":\"SATPracticeSession\",\"relationName\":\"SATPracticeSessionToUser\"},{\"name\":\"satDiagnosticResults\",\"kind\":\"object\",\"type\":\"SATDiagnosticResult\",\"relationName\":\"SATDiagnosticResultToUser\"},{\"name\":\"generatedQuestions\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"UserGeneratedQuestions\"},{\"name\":\"mockExams\",\"kind\":\"object\",\"type\":\"MockExam\",\"relationName\":\"MockExamToUser\"},{\"name\":\"mockAttempts\",\"kind\":\"object\",\"type\":\"MockAttempt\",\"relationName\":\"MockAttemptToUser\"},{\"name\":\"topicMasteries\",\"kind\":\"object\",\"type\":\"TopicMastery\",\"relationName\":\"TopicMasteryToUser\"}],\"dbName\":\"users\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"impersonatedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":\"sessions\"},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"refreshTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":\"accounts\"},\"Verification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verifications\"},\"StudentActivity\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StudentActivityToUser\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ActivityType\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":\"student_activities\"},\"LearningStreak\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"LearningStreakToUser\"},{\"name\":\"currentStreak\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"longestStreak\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastActivity\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"learning_streaks\"},\"Achievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AchievementToUser\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"AchievementCategory\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"completed\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":\"achievements\"},\"ChatSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ChatSessionToUser\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"ChatMessage\",\"relationName\":\"ChatMessageToChatSession\"}],\"dbName\":\"chat_sessions\"},\"ChatMessage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"ChatSession\",\"relationName\":\"ChatMessageToChatSession\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"links\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"keywords\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"chat_messages\"},\"SATStudyPlan\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SATStudyPlanToUser\"},{\"name\":\"timeline\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"focusAreas\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"weeklySchedule\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"resourceRecommendations\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"aiGeneratedPlan\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"completedWeeks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"completedTasks\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"sat_study_plans\"},\"SATPracticeSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SATPracticeSessionToUser\"},{\"name\":\"section\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"answers\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"timeSpent\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"sat_practice_sessions\"},\"SATDiagnosticResult\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SATDiagnosticResultToUser\"},{\"name\":\"mathScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"readingScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"writingScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"strengths\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"weaknesses\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"sat_diagnostic_results\"},\"Question\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"question\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"choices\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"answer\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"explanation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"source\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userGeneratedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserGeneratedQuestions\"}],\"dbName\":\"questions\"},\"MockExam\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MockExamToUser\"},{\"name\":\"goal\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grade\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sections\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"totalTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"attempts\",\"kind\":\"object\",\"type\":\"MockAttempt\",\"relationName\":\"MockAttemptToMockExam\"}],\"dbName\":\"mock_exams\"},\"MockAttempt\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MockAttemptToUser\"},{\"name\":\"mockExamId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mockExam\",\"kind\":\"object\",\"type\":\"MockExam\",\"relationName\":\"MockAttemptToMockExam\"},{\"name\":\"answers\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"scored\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"summary\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"finishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"mock_attempts\"},\"TopicMastery\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TopicMasteryToUser\"},{\"name\":\"topic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"correct\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastSeenAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"topic_mastery\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

